#include <bits/stdc++.h>
using namespace std;

// const int size=1e5+2;
long long a[100004],tree[400004];

void build(int node,int st,int en){
    
    if(st==en){
        tree[node]=a[st];
        return ;
    }
    
    int mid = (st+en)/2;
    build(2*node,st,mid);
    build(2*node+1,mid+1,en);
    
    tree[node] = tree[2*node] + tree[2*node+1];
}

long long query(int node,int st,int en,int l,int r){
    
    if( l>en || r<st ) return 0;
    
    if( st>=l && r>=en ) return tree[node];
    
    int mid = (st+en)/2;
    
    long long a =  query(2*node,st,mid,l,r);
    long long b =  query(2*node+1,mid+1,en,l,r);
    
    return a + b;
    
}

 void update(int node,int st,int en,int ind,int val){
    
        if(st==en){
            tree[node] += val;   // if increase or decrease
            tree[node] = val     // if replace
            // a[ind]=val;
            return ;
        }

        
        int mid = (st+en)/2;

        if(ind<=mid){
            update(2*node,st,mid,ind,val);
        }
        else 
            update(2*node+1,mid+1,en,ind,val);

        tree[node] = tree[2*node] + tree[2*node+1];
}



int main(){
    
    int n,m;
    cin>>n>>m;
    
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    
    build(1,0,n-1);
    
    while(m--){
        
        int ms; cin>>ms;
        if(ms==2){
            int l,r;  cin>>l>>r;
            cout<<query(1,0,n-1,l,r-1)<<endl;
        }
        else{
            int ind,val; cin>>ind>>val;
            update(1,0,n-1,ind,val);
        }
        
    }
    
    return 0;
}
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


struct SegTree{
public:

    SegTree (int _n, vector<int> &arr) : n(_n){
        tree.resize(4*n, 0);
        build(0, n-1, 0, arr);
    }
    
    ll query (int x, int y){
        if(x > y) return 0;
        return query (x, y, 0, n-1, 0);
    }
    
    void update (int ind, int val){
        update (ind, val, 0, n-1, 0);
    }

		void print_tree(){
        for(int i=0; i<2*n-1; i++) cout<< tree[i]<<" ";
        cout<<endl;
    }
    
private:

    vector<ll> tree;
    int n;
    
    void build (int l, int r, int i, const vector<int>& arr){
        if(l==r) {
            tree[i] = arr[l];
            return;
        }
        int m = (l+r) >> 1;
        build (l, m, i*2+1, arr);
        build (m+1, r, i*2+2, arr);
        
        tree[i] = (tree[i*2+1]+ tree[i*2+2]);
    }
    
    ll query (int x, int y, int l, int r, int i){
        if(r < x || l > y) return 0;
        if(l >= x && r<=y) return tree[i];
        
        int m = (l+r) >> 1;
        return  (
            query (x, y, l, m, i*2+1)+
            query (x, y, m+1, r, i*2+2)
        );
    }
    
    void update (int ind, int val, int l, int r, int i){
        if (l==r) {
            tree[i] = val;
            return;
        }
        
        int m = (l+r) >> 1;
        if (m >= ind) update (ind, val, l, m, i*2+1);
        else update (ind, val, m+1, r, i*2+2);
        
        tree[i] = (tree[2*i+1]+ tree[2*i+2]);
    }
};

int main(){
    
        int n = nums.size();
        vector<int> a(n, 0), a1; 
        a1.push_back(nums[0]);
        
        SegTree treeA(n, a);
    
    return 0;
}

