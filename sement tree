#include <bits/stdc++.h>
using namespace std;

// const int size=1e5+2;
long long a[100004],tree[400004];

void build(int node,int st,int en){
    
    if(st==en){
        tree[node]=a[st];
        return ;
    }
    
    int mid = (st+en)/2;
    build(2*node,st,mid);
    build(2*node+1,mid+1,en);
    
    tree[node] = tree[2*node] + tree[2*node+1];
}

long long query(int node,int st,int en,int l,int r){
    
    if( l>en || r<st ) return 0;
    
    if( st>=l && r>=en ) return tree[node];
    
    int mid = (st+en)/2;
    
    long long a =  query(2*node,st,mid,l,r);
    long long b =  query(2*node+1,mid+1,en,l,r);
    
    return a + b;
    
}

void update(int node,int st,int en,int ind,int val){
    
    if(st==en){
        tree[node] = val;
        a[ind]=val;
        return ;
    }
    
    tree[node] += val-a[ind];
    
    
    int mid = (st+en)/2;
    
    if(ind<=mid){
        update(2*node,st,mid,ind,val);
    }
    else 
        update(2*node+1,mid+1,en,ind,val);

    
}



int main(){
    
    int n,m;
    cin>>n>>m;
    
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    
    build(1,0,n-1);
    
    while(m--){
        
        int ms; cin>>ms;
        if(ms==2){
            int l,r;  cin>>l>>r;
            cout<<query(1,0,n-1,l,r-1)<<endl;
        }
        else{
            int ind,val; cin>>ind>>val;
            update(1,0,n-1,ind,val);
        }
        
    }
    
    return 0;
}
    
    
